import numpy as np
import scipy.io.wavfile as wav
import matplotlib.pyplot as plt


# Fun√ß√£o para leitura dos arquivos WAV
def read(file):
    sample_rate, data = wav.read(file)
    if len(data.shape) == 2:  # Verifica se tem 2 canais
        data = np.mean(data, axis=1)  # Caso tenha, converte para mono
    return sample_rate, data


# Fun√ß√£o para plotar os gr√°ficos
def plot_graph(time1, audio1, time2, audio2, result_time, result):
    # Plot do audio1
    plt.subplot(3, 1, 1)
    plt.plot(time1, audio1, label="√Åudio 1")
    plt.xlabel("Tempo [s]")
    plt.ylabel("Amplitude")
    plt.legend()

    # Plot do audio 2
    plt.subplot(3, 1, 2)
    plt.plot(time2, audio2, label="√Åudio 2")
    plt.xlabel("Tempo [s]")
    plt.ylabel("Amplitude")
    plt.legend()

    # Plot do result
    plt.subplot(3, 1, 3)
    plt.plot(result_time, result, label="Resultado")
    plt.xlabel("Tempo [s]")
    plt.ylabel("Amplitude")
    plt.legend()

    # Ajusta o layout para n√£o sobrepor os gr√°ficos e exibe o plot
    plt.tight_layout()
    plt.show()


# ------- Manipula√ß√£o: Somando os dois √°udios ===========================================


def linear_combination(audio1, audio2, k1, k2, rate1):
    # Temos como escalares para a combina√ß√£o linear: k1 e k2
    # k1 √© o peso para o audio1
    # k2 √© o peso para o audio2

    # Na pr√°tica, o que os escalares fazem √© controlar o volume de cada √°udio na combina√ß√£o linear
    # Por exemplo, se k1 = 1 e k2 = 1, o resultado ser√° a soma dos dois √°udios
    # - Se k1 = 1 e k2 = 0, o resultado ser√° o √°udio1
    # - Se k1 = 0 e k2 = 1, o resultado ser√° o √°udio2
    # - Se k1 = 0.5 e k2 = 0.5, o resultado ser√° a m√©dia dos dois √°udios

    # O que √© interessante √© que podemos anular a presen√ßa de determinadas frequ√™ncias,
    # caso um dos √°udios tenha uma frequ√™ncia isolada que n√£o queremos no resultado final
    # Portanto, na teoria, se k1 = 1 e k2 = -1, sendo audio1 uma voz e audio2 um ru√≠do de fundo,
    # o resultado ser√° a diferen√ßa entre os dois √°udios, ou seja, a voz isolada

    # Infelizmente, realizar a filtragem de ru√≠dos envolve t√©cnicas mais avan√ßadas de processamento de sinais
    # e n√£o √© t√£o simples quanto apenas inverter o sinal de um dos √°udios. (acreditem, j√° tentamos üòÖ)
    # No entanto, caso estejamos tratando de uma m√∫sica com voz e instrumental, e tenhamos o arquivo
    # de voz isolado, a diferen√ßa entre os dois √°udios resulta no instrumental isolado! üòØ

    # Para testar essa ideia, basta trocar os arquivos para audio1 e audio2 como:
    # audio1: "examples/snippet-all.wav"
    # audio2: "examples/snippet-vocal.wav"
    # E ajustar os pesos para que k1 = 1 e k2 = -1

    result = k1 * audio1 + k2 * audio2  # Combina√ß√£o linear dos vetores

    # Normaliza√ß√£o para evitar clipping (distor√ß√£o)
    result = result / np.max(np.abs(result))  # Normaliza entre -1 e 1
    result = np.int16(result * 32767)  # Converte de volta para 16-bit

    result_time = np.linspace(0.0, len(result) / rate1, len(result))

    return result_time, result


""" 
Algumas manipula√ß√µes nos levaram aos seguintes resultados:
    -   k1 = 1 e k2 = 1 (resultado = audio1 + audio2)
        Com esses valores, caso os √°udios sejam iguais, o resultado ser√° um √°udio com o dobro do volume
        Caso sejam diferentes, o resultado ser√° a jun√ß√£o dos dois √°udios
        
        Como exemplo pr√°tico, podemos somar um √°udio de voz com um instrumental, resultando numa m√∫sica completa!
        Para testar essa ideia, basta trocar os arquivos para audio1 e audio2 como:
        - audio1: "examples/snippet-instrumental.wav"
        - audio2: "examples/snippet-vocal.wav"
        Mas lembre-se de ajustar os pesos para k1 = 1 e k2 = 1!

    -   k1 = 1 e k2 = -1 (resultado = audio1 - audio2)
        Com esses valores, caso os √°udios sejam iguais, o resultado ser√° um √°udio nulo
        Assim, caso tenhamos somente um arquivo de √°udio como audio1 e audio2, podemos realizar sua
        combina√ß√£o linear com seu inverso, resultando num √°udio nulo (sil√™ncio absoluto). 
        Isso ocorre pois a soma de um sinal com seu inverso resulta em zero, ou seja, o √°udio √© cancelado.

        Agora um aspecto interessante!
        Caso sejam diferentes, por√©m haja alguma semelhan√ßa entre as faixas dos dois arquivos, 
        o resultado ser√° a remo√ß√£o da informa√ß√£o comum (intersec√ß√£o) entre os dois √°udios!
        Fizemos um exemplo pr√°tico envolvendo voz e instrumental no PDF e nos coment√°rios
        da fun√ß√£o "linear_combination()" acima! üòä

    -   k1 = 1 e k2 = 0 (resultado = audio1)
    -   k1 = 0 e k2 = 1 (resultado = audio2)
"""


def get_default(audio1_path="audios/audio1.wav", audio2_path="audios/audio2.wav"):
    # Leitura dos arquivos de √°udio
    rate1, audio1 = read(audio1_path)
    rate2, audio2 = read(audio2_path)
    min_len = min(audio1.shape[0], audio2.shape[0])

    # Para testar a nulifica√ß√£o de um √°udio, basta trocar os arquivos para:
    #   - audio1_path: "audios/audio1.wav"
    #   - audio2_path: "audios/audio1.wav"
    # Com os √°udios 1 e 2 iguais, basta ajustar os pesos para k1 = 1 e k2 = -1

    # Ajuste do tamanho dos √°udios
    audio1 = audio1[:min_len]
    audio2 = audio2[:min_len]

    # Cria√ß√£o do vetor de tempo
    time1 = np.linspace(0.0, len(audio1) / rate1, len(audio1))
    time2 = np.linspace(0.0, len(audio2) / rate2, len(audio2))

    return rate1, audio1, rate2, audio2, time1, time2


def main():
    # ============================ Configura√ß√µes Iniciais ===========================
    rate1, audio1, rate2, audio2, time1, time2 = get_default()

    k1 = 1  # Peso para audio1, ajuste conforme necess√°rio
    k2 = 1  # Peso para audio2, ajuste conforme necess√°rio
    # ===============================================================================

    # Para alguns exemplos pr√°ticos com os snippets, basta trocar os arquivos para:
    #   1. Obten√ß√£o do equivalente √† musica original (com voz e instrumental)
    #       - get_default("examples/snippet-instrumental.wav", "examples/snippet-vocal.wav")
    #       - k1 = 1 e k2 = 1
    #   2. Remo√ß√£o da voz da m√∫sica original/completa
    #      - get_default("examples/snippet-all.wav", "examples/snippet-vocal.wav")
    #      - k1 = 1 e k2 = -1

    result_time, result = linear_combination(audio1, audio2, k1, k2, rate1)

    # Cuidado!
    # O resultado precisa ser processado antes do gr√°fico, caso contr√°rio,
    # o arquivo s√≥ seria salvo ap√≥s o fechamento do gr√°fico
    result = np.int16(result)
    wav.write("resultado.wav", rate1, result)  # O arquivo fica nos arquivos do Collab

    plot_graph(time1, audio1, time2, audio2, result_time, result)


main()
